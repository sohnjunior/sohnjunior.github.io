<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>sohnjunior.github.io/</title>
   
   <link>https://sohnjunior.github.io</link>
   <description>PS와 웹 개발 관련내용을 기록합니다.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>BOJ 6186 - Best Grass</title>
	  <link>//boj-6186</link>
	  <author></author>
	  <pubDate>2021-02-28T00:00:00+09:00</pubDate>
	  <guid>//boj-6186</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/6186">백준 온라인 저지 - 6186번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p>인접한 잔디 뭉치의 개수를 찾는 문제입니다.</p>

<p>잔디 뭉치는 서로 인접하지 않기 때문에 각 좌표를 순회하면서 잔디가 발견되면 인접한 네 방향을 모두</p>

<p>방문해보는 방법으로 모든 잔디 뭉치를 탐색할 수 있습니다.</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">R</span><span class="p">,</span> <span class="n">C</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
<span class="n">grass</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">R</span><span class="p">)]</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">clump</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">visit</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">C</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">R</span><span class="p">)]</span>

    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">R</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">C</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visit</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="ow">and</span> <span class="n">grass</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="s">'#'</span><span class="p">:</span>
                <span class="n">visit</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="n">clump</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
                    <span class="n">nr</span><span class="p">,</span> <span class="n">nc</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">c</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                    <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nr</span> <span class="o">&lt;</span> <span class="n">R</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nc</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">:</span>
                        <span class="k">if</span> <span class="ow">not</span> <span class="n">visit</span><span class="p">[</span><span class="n">nr</span><span class="p">][</span><span class="n">nc</span><span class="p">]:</span>
                            <span class="n">visit</span><span class="p">[</span><span class="n">nr</span><span class="p">][</span><span class="n">nc</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">clump</span>


<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">())</span>

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>BOJ 16472 - 고냥이</title>
	  <link>//boj-16472</link>
	  <author></author>
	  <pubDate>2021-02-25T00:00:00+09:00</pubDate>
	  <guid>//boj-16472</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/16472">백준 온라인 저지 - 16472번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p>최대 <code class="highlighter-rouge">N</code> 개의 종류의 알파벳을 가진 연속된 문자열중에서 인식할 수 있는 최대 문자열의 길이를 구하는 문제입니다.</p>

<p>최대 문자열의 길이가 <code class="highlighter-rouge">100,000</code> 이기 때문에 <code class="highlighter-rouge">완전 탐색</code> 을 이용할 경우 시간 초과가 발생하게 됩니다.</p>

<p>대신 <code class="highlighter-rouge">투 포인터</code> 를 이용해서 <code class="highlighter-rouge">N</code> 을 초과할 경우 알파벳의 종류가 <code class="highlighter-rouge">N</code> 보다 작아질 때까지 <code class="highlighter-rouge">left</code> 를 증가시키고</p>

<p><code class="highlighter-rouge">N</code> 보다 같거나 작을 경우 <code class="highlighter-rouge">right</code> 을 증가시키는 방법을 사용하면 최적화가 가능합니다.</p>

<p>이때 각 알파벳의 등장 횟수를 기록하기 위해 <code class="highlighter-rouge">deque</code> 를 값으로 사용하는 <code class="highlighter-rouge">dict</code> 를 사용했습니다.</p>

<p>각각의 <code class="highlighter-rouge">deque</code> 에는 알파벳의 인덱스가 저장되며</p>

<p>알파벳의 종류가 <code class="highlighter-rouge">N</code> 보다 많아졌을 시 가장 왼쪽에 있는 알파벳을 키로 하는 <code class="highlighter-rouge">deque</code> 에서 하나 <code class="highlighter-rouge">dequeue</code> 합니다.</p>

<p>이러한 연산을 <code class="highlighter-rouge">N</code> 보다 같거나 작아질때까지 반복하며 길이를 하나씩 줄여가며 검사하면 됩니다.</p>

<p>(만약 <code class="highlighter-rouge">deque</code> 가 비워질 경우 해당하는 알파벳을 <code class="highlighter-rouge">dict</code> 에서 지워줍니다.)</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">S</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="n">memo</span><span class="p">[</span><span class="n">S</span><span class="p">[</span><span class="n">right</span><span class="p">]]</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>

    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
        <span class="n">right</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">right</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">):</span>
            <span class="k">break</span>

        <span class="k">if</span> <span class="n">S</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">S</span><span class="p">[</span><span class="n">right</span><span class="p">]]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">S</span><span class="p">[</span><span class="n">right</span><span class="p">]]</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="n">right</span><span class="p">])</span>

        <span class="c"># 번역기 인식 범위를 넘어설 경우</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">memo</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">N</span> <span class="ow">and</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">leftmost</span> <span class="o">=</span> <span class="n">S</span><span class="p">[</span><span class="n">left</span><span class="p">]</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">leftmost</span><span class="p">]</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">memo</span><span class="p">[</span><span class="n">leftmost</span><span class="p">]:</span>
                <span class="n">memo</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">leftmost</span><span class="p">)</span>
            <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">length</span> <span class="o">=</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">answer</span>


<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">())</span>

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>BOJ 2688 - 줄어들지 않아</title>
	  <link>//boj-2688</link>
	  <author></author>
	  <pubDate>2021-02-23T00:00:00+09:00</pubDate>
	  <guid>//boj-2688</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/2688">백준 온라인 저지 - 2688번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p>줄어들지 않는 <code class="highlighter-rouge">n</code> 자리 수를 구하는 문제입니다.</p>

<p><code class="highlighter-rouge">dp(num, digit) = num 보다 크거나 같은 수로 시작하는 digit 자리 수의 개수</code> 라고 정의한다면 다음과 같은 점화식을 도출할 수 있습니다.</p>

<blockquote>
  <p>dp(num, digit) = dp(num, digit - 1) + dp(num + 1, digit - 1) …</p>
</blockquote>

<p>이때 <code class="highlighter-rouge">num</code> 은 <code class="highlighter-rouge">0 &lt;= num &lt;= 9</code> 이어야 하며 <code class="highlighter-rouge">n 자리수</code> 의 줄어들지 않는 수는 <code class="highlighter-rouge">dp(0~9, n)</code> 입니다.</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="n">T</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">testcases</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">T</span><span class="p">)]</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">memo</span> <span class="o">=</span> <span class="p">[[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="mi">65</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>

    <span class="k">for</span> <span class="n">digit</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">65</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">num</span><span class="p">][</span><span class="n">digit</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">if</span> <span class="n">digit</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">to</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
                    <span class="n">memo</span><span class="p">[</span><span class="n">num</span><span class="p">][</span><span class="n">digit</span><span class="p">]</span> <span class="o">+=</span> <span class="n">memo</span><span class="p">[</span><span class="n">to</span><span class="p">][</span><span class="n">digit</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">memo</span><span class="p">[</span><span class="n">num</span><span class="p">][</span><span class="n">digit</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">testcases</span><span class="p">:</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="n">memo</span><span class="p">[</span><span class="n">num</span><span class="p">][</span><span class="n">n</span><span class="p">]</span>
        <span class="k">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>


<span class="n">solution</span><span class="p">()</span>

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>BOJ 6156 - Cow Contest</title>
	  <link>//boj-6156</link>
	  <author></author>
	  <pubDate>2021-02-22T00:00:00+09:00</pubDate>
	  <guid>//boj-6156</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/6156">백준 온라인 저지 - 6156번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p>두 소들 간의 싸움 경기 결과가 주어질 때 순위를 결정할 수 있는 소들의 수를 구하는 문제입니다.</p>

<p>특정 소의 순위를 결정하기 위해서는 해당 소에게 진 소들의 수와 해당 소를 이긴 소들의 합이 <code class="highlighter-rouge">N - 1</code> 이어야 합니다.</p>

<p>때문에 각 소들을 그래프의 정점이라고 생각한다면 모든 소들 사이의 도달 가능성을 <code class="highlighter-rouge">플로이드 와샬</code> 알고리즘을 이용해 파악하고</p>

<p>각 소들에 대해서 특정 소 <code class="highlighter-rouge">A</code> 에 도달 가능한 정점의 수와 <code class="highlighter-rouge">A</code> 에서 도달 가능한 소들의 수를 세어주면 됩니다.</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">N</span><span class="p">,</span> <span class="n">M</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
<span class="n">results</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">)]</span>


<span class="k">def</span> <span class="nf">make_dist</span><span class="p">():</span>
    <span class="n">dist</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>

    <span class="k">for</span> <span class="n">winner</span><span class="p">,</span> <span class="n">loser</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
        <span class="n">dist</span><span class="p">[</span><span class="n">loser</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">winner</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">dist</span>


<span class="k">def</span> <span class="nf">floyd</span><span class="p">(</span><span class="n">dist</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
                <span class="n">dist</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="ow">or</span> <span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="ow">and</span> <span class="n">dist</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">v</span><span class="p">])</span>

    <span class="n">determined</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="n">reachable</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">to</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">to</span><span class="p">]</span> <span class="ow">and</span> <span class="n">to</span> <span class="o">!=</span> <span class="n">v</span><span class="p">:</span>
                <span class="n">reachable</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">frm</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">dist</span><span class="p">[</span><span class="n">frm</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="ow">and</span> <span class="n">frm</span> <span class="o">!=</span> <span class="n">v</span><span class="p">:</span>
                <span class="n">reachable</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">reachable</span> <span class="o">==</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">determined</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">determined</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">dist</span> <span class="o">=</span> <span class="n">make_dist</span><span class="p">()</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">floyd</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">answer</span>


<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">())</span>

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>BOJ 14620 - 꽃길</title>
	  <link>//boj-14620</link>
	  <author></author>
	  <pubDate>2021-02-21T00:00:00+09:00</pubDate>
	  <guid>//boj-14620</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/14620">백준 온라인 저지 - 14620번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p><code class="highlighter-rouge">백트래킹</code> 을 이용한 탐색 문제입니다.</p>

<p>총 3개의 씨앗을 심을 수 있으며 특정 씨앗을 심을 경우 문제에서 제시된 인접한 위치에는 씨앗을 심을 수 없습니다.</p>

<p>문제에서 십자 모양으로 꽃이 피기 때문에 <code class="highlighter-rouge">(1, 1)</code> 부터 시작해서 <code class="highlighter-rouge">(N - 1, N - 1)</code> 까지만 탐색을 수행하면 된다는 것을 알 수 있습니다.</p>

<p>각 격자의 칸들을 이용해서 가능한 모든 조합을 만들어보면 되는데 이때 해당 위치에 씨앗을 심을 수 있는지 판단하는 함수를 하나 정의해서 구현합니다.</p>

<p>탐색할 때 주의할 점은 다음 위치부터 탐색하기 위해 <code class="highlighter-rouge">(x, y)</code> 값을 재귀적으로 넘겨주는데, 이때 <code class="highlighter-rouge">y</code> 가 끝에 도달할 경우(<code class="highlighter-rouge">N - 2</code>)</p>

<p>다시 <code class="highlighter-rouge">y</code> 축 탐색 시작 지점을 0으로 초기화 시켜주어야 한다는 점입니다.</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">board</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">acc_flower</span><span class="p">(</span><span class="n">visit</span><span class="p">):</span>
    <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">visit</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]:</span>
                <span class="n">acc</span> <span class="o">+=</span> <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">acc</span>


<span class="k">def</span> <span class="nf">is_acceptable</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]:</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">return</span> <span class="bp">True</span>


<span class="k">def</span> <span class="nf">set_flower</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>


<span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">seed</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">seed</span><span class="p">:</span>
        <span class="n">acc</span> <span class="o">=</span> <span class="n">acc_flower</span><span class="p">(</span><span class="n">visit</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">acc</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">maxsize</span>
    <span class="k">for</span> <span class="n">nx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">ny</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">is_acceptable</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">):</span>
                <span class="n">set_flower</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">ret</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="n">dfs</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="n">seed</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
                <span class="n">set_flower</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            <span class="c"># y축이 끝에 도달하면 1로 초기화</span>
            <span class="k">if</span> <span class="n">ny</span> <span class="o">==</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">ret</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">maxsize</span>

    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">visit</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
            <span class="n">set_flower</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">answer</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">dfs</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
            <span class="n">set_flower</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">answer</span>


<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">())</span>

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>BOJ 9625 - BABBA</title>
	  <link>//boj-9625</link>
	  <author></author>
	  <pubDate>2021-02-20T00:00:00+09:00</pubDate>
	  <guid>//boj-9625</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/9625">백준 온라인 저지 - 9625번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p><code class="highlighter-rouge">동적 계획법</code> 을 활용한 문제입니다.</p>

<p>각 문자가 일정 규칙으로 변환되는데 이를 활용해서 점화식을 세우면 됩니다.</p>

<p>저 같은 경우 문장의 길이가 피보나치 수열을 따르면서 <code class="highlighter-rouge">B</code> 의 개수도 피보나치 수열의 개수대로 증가된다는 것을 이용해서 문제를 풀었는데</p>

<p>다른 분들의 풀이를 보니 그냥 <code class="highlighter-rouge">A</code> 와 <code class="highlighter-rouge">B</code> 각각에 대해서 점화식을 세우고 순회를 하면 간단하게 해결할 수 있었습니다.</p>

<p><code class="highlighter-rouge">K</code> 가 작기 때문에 <code class="highlighter-rouge">완전 탐색</code> 으로 구현해도 풀 수 있을 것 같기는 한데 이후에 비슷한 유형에 대비해서 접근 방법을 기억해놔야 할 것 같습니다.</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="n">K</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">K</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">K</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">K</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"0 1"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">f</span><span class="s">"{dp[K] - dp[K - 1]} {dp[K - 1]}"</span>


<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">())</span>

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>BOJ 20055 - 컨베이어 벨트 위의 로봇</title>
	  <link>//boj-20055</link>
	  <author></author>
	  <pubDate>2021-02-19T00:00:00+09:00</pubDate>
	  <guid>//boj-20055</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/20055">백준 온라인 저지 - 20055번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p>문제에서 제시한 규칙대로 동작하는 컨베이어 벨트를 구현하면 되는 문제입니다.</p>

<p>2차원 배열을 이용해서 컨베이어 벨트를 나타냈지만 사실 그냥 1차원 배열을 이용해서 구현해도 될 것 같습니다.</p>

<p>문제에서 주어진 네 가지 단계를 각각의 함수로 구현해서 검사해주는 방식으로 구현했습니다.</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">N</span><span class="p">,</span> <span class="n">K</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
<span class="n">belts</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>


<span class="k">def</span> <span class="nf">init_conveyor</span><span class="p">():</span>
    <span class="n">conveyor</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span>
    <span class="n">conveyor</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">belts</span><span class="p">[:</span><span class="n">N</span><span class="p">]]</span>
    <span class="n">conveyor</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">belts</span><span class="p">[</span><span class="n">N</span><span class="p">:][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>

    <span class="k">return</span> <span class="n">conveyor</span>


<span class="k">def</span> <span class="nf">rotate_belt</span><span class="p">(</span><span class="n">conveyor</span><span class="p">,</span> <span class="n">robots</span><span class="p">):</span>
    <span class="c"># 컨베이어 벨트 이동</span>
    <span class="n">cache1</span> <span class="o">=</span> <span class="n">conveyor</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">conveyor</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">conveyor</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>

    <span class="n">cache2</span> <span class="o">=</span> <span class="n">conveyor</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">conveyor</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">conveyor</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>

    <span class="n">conveyor</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">cache2</span>
    <span class="n">conveyor</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">cache1</span>

    <span class="c"># 로봇 이동</span>
    <span class="n">robots</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
    <span class="n">robots</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">move_robots</span><span class="p">(</span><span class="n">conveyor</span><span class="p">,</span> <span class="n">robots</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">robots</span><span class="p">[</span><span class="n">idx</span><span class="p">]:</span>
            <span class="n">next_idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">robots</span><span class="p">[</span><span class="n">next_idx</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">conveyor</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">next_idx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">conveyor</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">next_idx</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">robots</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">robots</span><span class="p">[</span><span class="n">next_idx</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>


<span class="k">def</span> <span class="nf">add_robot</span><span class="p">(</span><span class="n">conveyor</span><span class="p">,</span> <span class="n">robots</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">conveyor</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">robots</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">robots</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">conveyor</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>


<span class="k">def</span> <span class="nf">check_belt</span><span class="p">(</span><span class="n">conveyor</span><span class="p">):</span>
    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">conveyor</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]:</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">cnt</span> <span class="o">&lt;</span> <span class="n">K</span>


<span class="k">def</span> <span class="nf">check_endpoint</span><span class="p">(</span><span class="n">robots</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">robots</span><span class="p">[</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]:</span>
        <span class="n">robots</span><span class="p">[</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">conveyor</span> <span class="o">=</span> <span class="n">init_conveyor</span><span class="p">()</span>
    <span class="n">robots</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span><span class="p">)</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">rotate_belt</span><span class="p">(</span><span class="n">conveyor</span><span class="p">,</span> <span class="n">robots</span><span class="p">)</span>
        <span class="n">check_endpoint</span><span class="p">(</span><span class="n">robots</span><span class="p">)</span>
        <span class="n">move_robots</span><span class="p">(</span><span class="n">conveyor</span><span class="p">,</span> <span class="n">robots</span><span class="p">)</span>
        <span class="n">check_endpoint</span><span class="p">(</span><span class="n">robots</span><span class="p">)</span>
        <span class="n">add_robot</span><span class="p">(</span><span class="n">conveyor</span><span class="p">,</span> <span class="n">robots</span><span class="p">)</span>

        <span class="n">go</span> <span class="o">=</span> <span class="n">check_belt</span><span class="p">(</span><span class="n">conveyor</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">go</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">answer</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">answer</span>


<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">())</span>

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>BOJ 3109 - 빵집</title>
	  <link>//boj-3109</link>
	  <author></author>
	  <pubDate>2021-02-17T00:00:00+09:00</pubDate>
	  <guid>//boj-3109</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/3109">백준 온라인 저지 - 3109번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p>파이프를 연결할 수 있는 세 가지 방법을 이용해서 가장 많은 연결 방법을 찾는 문제입니다.</p>

<p><code class="highlighter-rouge">백트래킹</code> 을 이용해서 모든 경우를 찾을 수 있는데 문제는 중복된 탐색이 많이 존재한다는 것입니다.</p>

<p>여기서 얻을 수 있는 아이디어는 우리의 <code class="highlighter-rouge">백트래킹</code> 함수가 한 지점에 대해서 목표 지점에 도달하는 방빕이 있는지 판단하고 있다는 것입니다.</p>

<p>따라서 해당 지점에서 목표 지점에 방문이 가능하지 않더라도 이 지점을 다시 미방문으로 바꿔주는 것이 아니라 그냥 방문 처리로 남겨놔도 됩니다.</p>

<p>(목표 지점에 도달 가능한 경우는 이 경로에 파이프를 놔야하기 때문에 방문 처리를 합니다.)</p>

<p>왜냐하면 이후에 해당 지점에 다시 방문하더라도 또 다시 목표 지점에 도달 불가능한 것은 자명하기 때문입니다.</p>

<p>이를 통해서 중복된 탐색 횟수를 줄일 수 있습니다.</p>

<p>처음에는 이 문제가 왜 <code class="highlighter-rouge">그리디</code> 로 분류되어 있는지 몰랐는데 중복 탐색을 줄이는 아이디어 때문에 이렇게 분류된 것 같습니다. 😄</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">sys</span><span class="o">.</span><span class="n">setrecursionlimit</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">6</span><span class="p">)</span>

<span class="n">R</span><span class="p">,</span> <span class="n">C</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
<span class="n">board</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">R</span><span class="p">)]</span>


<span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">board</span>

    <span class="n">board</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="s">'x'</span>

    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="n">C</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="n">is_reachable</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">for</span> <span class="n">nr</span><span class="p">,</span> <span class="n">nc</span> <span class="ow">in</span> <span class="p">[[</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]:</span>
        <span class="k">if</span> <span class="n">nr</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">nr</span> <span class="o">&gt;=</span> <span class="n">R</span> <span class="ow">or</span> <span class="n">nc</span> <span class="o">&gt;=</span> <span class="n">C</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">nr</span><span class="p">][</span><span class="n">nc</span><span class="p">]</span> <span class="o">==</span> <span class="s">'.'</span><span class="p">:</span>
            <span class="n">is_reachable</span> <span class="o">=</span> <span class="n">is_reachable</span> <span class="ow">or</span> <span class="n">dfs</span><span class="p">(</span><span class="n">nr</span><span class="p">,</span> <span class="n">nc</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">is_reachable</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">R</span><span class="p">):</span>
        <span class="n">is_reachable</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">is_reachable</span><span class="p">:</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">answer</span>


<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">())</span>

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>BOJ 20044 - Project Teams</title>
	  <link>//boj-20044</link>
	  <author></author>
	  <pubDate>2021-02-16T00:00:00+09:00</pubDate>
	  <guid>//boj-20044</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/20044">백준 온라인 저지 - 20044번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p>두 명씩 팀원을 구성할 때, 팀원들의 코딩 능력의 합들 중 가장 작은 경우를 최대화하는 문제입니다.</p>

<p>두 명씩 묶기 때문에 능력치를 기준으로 오름차순으로 정렬한 다음 양 끝에 있는 학생들끼리 묶어주면 되는 <code class="highlighter-rouge">그리디</code> 문제입니다.</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">stats</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">stats</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>

    <span class="n">answer</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">maxsize</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">stats</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">stats</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">N</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">answer</span>


<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">())</span>

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>BOJ 11952 - 좀비</title>
	  <link>//boj-11952</link>
	  <author></author>
	  <pubDate>2021-02-15T00:00:00+09:00</pubDate>
	  <guid>//boj-11952</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/11952">백준 온라인 저지 - 11952번</a></p>

<h2 id="풀이-과정">풀이 과정</h2>

<p>문제에서 주어진 좀비로 점령된 도시들을 이용해서 위험한 지역을 찾고,</p>

<p>이를 통해 도시 방문 비용을 계산하고 <code class="highlighter-rouge">다익스트라</code> 알고리즘을 이용해 최단거리를 계산합니다.</p>

<p>이때 도시에게 점령당한 도시는 최단 거리 계산 시 고려하지 않도록 하는 것에 유의합니다.</p>

<p>좀비에게 점령당한 도시를 기준으로 <code class="highlighter-rouge">S</code> 이하의 거리를 가지는 위험한 도시를 판단하기 위해서는 <code class="highlighter-rouge">BFS</code> 를 이용했습니다.</p>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="kn">import</span> <span class="nn">heapq</span>

<span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">S</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
<span class="n">P</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
<span class="n">occupied</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">K</span><span class="p">)]</span>
<span class="n">edges</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">)]</span>


<span class="k">def</span> <span class="nf">make_graph</span><span class="p">():</span>
    <span class="n">graph</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>

    <span class="k">for</span> <span class="n">frm</span><span class="p">,</span> <span class="n">to</span> <span class="ow">in</span> <span class="n">edges</span><span class="p">:</span>
        <span class="n">graph</span><span class="p">[</span><span class="n">frm</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">to</span><span class="p">)</span>
        <span class="n">graph</span><span class="p">[</span><span class="n">to</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">frm</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">graph</span>


<span class="k">def</span> <span class="nf">find_zombie_land</span><span class="p">(</span><span class="n">graph</span><span class="p">):</span>
    <span class="n">zombie_land</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">start</span> <span class="ow">in</span> <span class="n">occupied</span><span class="p">:</span>
        <span class="n">lands</span> <span class="o">=</span> <span class="n">bfs</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">S</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">land</span> <span class="ow">in</span> <span class="n">lands</span><span class="p">:</span>
            <span class="n">zombie_land</span><span class="p">[</span><span class="n">land</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="n">zombie_land</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">zombie_land</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">return</span> <span class="n">zombie_land</span>


<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
    <span class="n">visit</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">visit</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>

    <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
        <span class="n">here</span><span class="p">,</span> <span class="n">move</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">move</span> <span class="o">&gt;</span> <span class="n">offset</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">here</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">there</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">here</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visit</span><span class="p">[</span><span class="n">there</span><span class="p">]:</span>
                <span class="n">visit</span><span class="p">[</span><span class="n">there</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">there</span><span class="p">,</span> <span class="n">move</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">ret</span>


<span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">zombie_land</span><span class="p">):</span>
    <span class="n">pq</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">dist</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="o">.</span><span class="n">maxsize</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="n">dist</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">pq</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>

    <span class="k">while</span> <span class="n">pq</span><span class="p">:</span>
        <span class="n">cost</span><span class="p">,</span> <span class="n">here</span> <span class="o">=</span> <span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">pq</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">dist</span><span class="p">[</span><span class="n">here</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">cost</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">there</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">here</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">there</span> <span class="ow">in</span> <span class="n">occupied</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="n">next_cost</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">+</span> <span class="p">(</span><span class="n">Q</span> <span class="k">if</span> <span class="n">zombie_land</span><span class="p">[</span><span class="n">there</span><span class="p">]</span> <span class="k">else</span> <span class="n">P</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">next_cost</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">[</span><span class="n">there</span><span class="p">]:</span>
                <span class="n">dist</span><span class="p">[</span><span class="n">there</span><span class="p">]</span> <span class="o">=</span> <span class="n">next_cost</span>
                <span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">pq</span><span class="p">,</span> <span class="p">[</span><span class="n">next_cost</span><span class="p">,</span> <span class="n">there</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">dist</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">-</span> <span class="n">P</span>


<span class="k">def</span> <span class="nf">solution</span><span class="p">():</span>
    <span class="n">graph</span> <span class="o">=</span> <span class="n">make_graph</span><span class="p">()</span>
    <span class="n">zombie_land</span> <span class="o">=</span> <span class="n">find_zombie_land</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">dijkstra</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">zombie_land</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">answer</span>


<span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">())</span>

</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
